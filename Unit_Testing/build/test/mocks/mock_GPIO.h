/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_GPIO_H
#define _MOCK_GPIO_H

#include "unity.h"
#include "GPIO.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_GPIO_Init(void);
void mock_GPIO_Destroy(void);
void mock_GPIO_Verify(void);




#define GPIO_initPin_IgnoreAndReturn(cmock_retval) GPIO_initPin_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void GPIO_initPin_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ErrorStatus_t cmock_to_return);
#define GPIO_initPin_StopIgnore() GPIO_initPin_CMockStopIgnore()
void GPIO_initPin_CMockStopIgnore(void);
#define GPIO_initPin_ExpectAndReturn(add_pin, cmock_retval) GPIO_initPin_CMockExpectAndReturn(__LINE__, add_pin, cmock_retval)
void GPIO_initPin_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, GPIO_cfg_t* add_pin, ErrorStatus_t cmock_to_return);
typedef ErrorStatus_t (* CMOCK_GPIO_initPin_CALLBACK)(GPIO_cfg_t* add_pin, int cmock_num_calls);
void GPIO_initPin_AddCallback(CMOCK_GPIO_initPin_CALLBACK Callback);
void GPIO_initPin_Stub(CMOCK_GPIO_initPin_CALLBACK Callback);
#define GPIO_initPin_StubWithCallback GPIO_initPin_Stub
#define GPIO_setPinValue_IgnoreAndReturn(cmock_retval) GPIO_setPinValue_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void GPIO_setPinValue_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ErrorStatus_t cmock_to_return);
#define GPIO_setPinValue_StopIgnore() GPIO_setPinValue_CMockStopIgnore()
void GPIO_setPinValue_CMockStopIgnore(void);
#define GPIO_setPinValue_ExpectAndReturn(GPIOx, GPIO_pin, GPIO_STATE, cmock_retval) GPIO_setPinValue_CMockExpectAndReturn(__LINE__, GPIOx, GPIO_pin, GPIO_STATE, cmock_retval)
void GPIO_setPinValue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void* GPIOx, u8 GPIO_pin, u8 GPIO_STATE, ErrorStatus_t cmock_to_return);
typedef ErrorStatus_t (* CMOCK_GPIO_setPinValue_CALLBACK)(void* GPIOx, u8 GPIO_pin, u8 GPIO_STATE, int cmock_num_calls);
void GPIO_setPinValue_AddCallback(CMOCK_GPIO_setPinValue_CALLBACK Callback);
void GPIO_setPinValue_Stub(CMOCK_GPIO_setPinValue_CALLBACK Callback);
#define GPIO_setPinValue_StubWithCallback GPIO_setPinValue_Stub
#define GPIO_getPinValue_IgnoreAndReturn(cmock_retval) GPIO_getPinValue_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void GPIO_getPinValue_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ErrorStatus_t cmock_to_return);
#define GPIO_getPinValue_StopIgnore() GPIO_getPinValue_CMockStopIgnore()
void GPIO_getPinValue_CMockStopIgnore(void);
#define GPIO_getPinValue_ExpectAndReturn(GPIOx, GPIO_pin, Pin_Stat, cmock_retval) GPIO_getPinValue_CMockExpectAndReturn(__LINE__, GPIOx, GPIO_pin, Pin_Stat, cmock_retval)
void GPIO_getPinValue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void* GPIOx, u8 GPIO_pin, u8* Pin_Stat, ErrorStatus_t cmock_to_return);
typedef ErrorStatus_t (* CMOCK_GPIO_getPinValue_CALLBACK)(void* GPIOx, u8 GPIO_pin, u8* Pin_Stat, int cmock_num_calls);
void GPIO_getPinValue_AddCallback(CMOCK_GPIO_getPinValue_CALLBACK Callback);
void GPIO_getPinValue_Stub(CMOCK_GPIO_getPinValue_CALLBACK Callback);
#define GPIO_getPinValue_StubWithCallback GPIO_getPinValue_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
